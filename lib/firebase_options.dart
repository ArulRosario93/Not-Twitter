// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {

  // initialize from .env file



  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['FirebaseWebApiKey']?? "",
    appId: dotenv.env['FirebaseWebAppId']?? "",
    messagingSenderId: dotenv.env['FirebaseWebMessagingSenderId']?? "",
    projectId: dotenv.env['FirebaseWebProjectId']?? "",
    authDomain: dotenv.env['FirebaseWebAuthDomain']?? "",
    storageBucket: dotenv.env['FirebaseWebStorageBucket']?? "",
    measurementId: dotenv.env['FirebaseWebMeasurementId']?? "",
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['FirebaseAndroidApiKey']?? "",
    appId: dotenv.env['FirebaseAndroidAppId']?? "",
    messagingSenderId:  dotenv.env['FirebaseAndroidMessagingSenderId']?? "",
    projectId: dotenv.env['FirebaseAndroidProjectId']?? "",
    storageBucket: dotenv.env['FirebaseAndroidStorageBucket']?? "",
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['FirebaseIosApiKey']?? "",
    appId: dotenv.env['FirebaseIosAppId']?? "",
    messagingSenderId: dotenv.env['FirebaseIosMessagingSenderId']?? "",
    projectId: dotenv.env['FirebaseIosProjectId']?? "",
    storageBucket: dotenv.env['FirebaseIosStorageBucket']?? "",
    androidClientId: dotenv.env['FirebaseIosAndroidClientId']?? "",
    iosBundleId: dotenv.env['FirebaseIosIosBundleId']?? "",
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env["FirebaseMacOSApiKey"]?? "",
    appId: dotenv.env["FirebaseMacOSAppId"]?? "",
    messagingSenderId: dotenv.env["FirebaseMacOSMessagingSenderId"]?? "",
    projectId: dotenv.env["FirebaseMacOSProjectId"]?? "",
    storageBucket: dotenv.env["FirebaseMacOSStorageBucket"]?? "",
    androidClientId: dotenv.env["FirebaseMacOSAndroidClientId"]?? "",
    iosBundleId: dotenv.env["FirebaseMacOSIosBundleId"]?? "",
  );

  static FirebaseOptions windows = FirebaseOptions(
    apiKey: dotenv.env["FirebaseWindowsApiKey"]?? "",
    appId: dotenv.env["FirebaseWindowsAppId"]?? "",
    messagingSenderId: dotenv.env["FirebaseWindowsMessagingSenderId"]?? "",
    projectId: dotenv.env["FirebaseWindowsProjectId"]?? "",
    authDomain: dotenv.env["FirebaseWindowsAuthDomain"]?? "",
    storageBucket: dotenv.env["FirebaseWindowsStorageBucket"]?? "",
    measurementId: dotenv.env["FirebaseWindowsMeasurementId"]?? "",
  );
}